import { NextResponse } from 'next/server';
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';

export async function POST(request) {
  try {
    const requestData = await request.json();
    const { projectId } = requestData;
    
    if (!projectId) {
      return NextResponse.json({ success: false, error: 'ID de projet manquant' }, { status: 400 });
    }
    
    console.log(`Archivage du projet ${projectId} via l'API serveur`);
    
    // Créer un client supabase côté serveur
    const supabase = createRouteHandlerClient({ cookies });
    
    // 1. Vérifier que le projet existe
    const { data: project, error: checkError } = await supabase
      .from('projects')
      .select('*')
      .eq('id', projectId)
      .single();
      
    if (checkError) {
      return NextResponse.json({ 
        success: false, 
        error: 'Projet non trouvé',
        details: checkError
      }, { status: 404 });
    }
    
    console.log(`Projet trouvé: ${project.name} (${projectId})`);
    
    // 2. Archiver le projet (au lieu de le supprimer)
    console.log("Archivage du projet...");
    const { error: archiveError } = await supabase
      .from('projects')
      .update({ 
        archive: true,
        archived_at: new Date().toISOString()
      })
      .eq('id', projectId);
    
    if (archiveError) {
      console.warn('Erreur lors de l\'archivage du projet:', archiveError);
      return NextResponse.json({ 
        success: false, 
        error: 'Impossible d\'archiver le projet',
        details: archiveError
      }, { status: 500 });
    }
    
    // 3. Vérification finale
    const { data: finalCheck } = await supabase
      .from('projects')
      .select('archive')
      .eq('id', projectId)
      .single();
    
    if (finalCheck && finalCheck.archive === true) {
      console.log("Vérification finale: Le projet a bien été archivé");
      return NextResponse.json({ 
        success: true, 
        message: `Projet ${project.name} archivé avec succès`
      });
    }
    
    // Si on arrive ici, le projet n'a pas pu être archivé
    return NextResponse.json({ 
      success: false, 
      error: 'Impossible d\'archiver le projet',
      suggestion: 'Vérifiez que le champ "archive" existe bien dans la table projects'
    }, { status: 500 });
    
  } catch (error) {
    console.error('Erreur serveur lors de l\'archivage du projet:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Erreur interne du serveur',
      details: error.message
    }, { status: 500 });
  }
}
