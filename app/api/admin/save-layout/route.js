import { createClient } from '@supabase/supabase-js';
import { NextResponse } from 'next/server';

// Fonction pour d√©coder un JWT sans le v√©rifier
function decodeJwt(token) {
  try {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = Buffer.from(base64, 'base64').toString('utf8');
    return JSON.parse(jsonPayload);
  } catch (error) {
    return { error: 'Invalid JWT format' };
  }
}

export async function POST(request) {
  try {
    console.log('üîç API save-layout: Requ√™te re√ßue');
    
    // Parse the JSON body from the request
    const body = await request.json();
    const { projectId, name, elements, stageSize, setAsDefault } = body;
    
    console.log('üì¶ Donn√©es re√ßues:', { 
      projectId, 
      name, 
      elementsCount: elements?.length || 0,
      hasStageSize: !!stageSize,
      setAsDefault 
    });
    
    // Validation
    if (!projectId || typeof projectId !== 'string') {
      console.error('‚ùå Erreur: projectId manquant ou invalide');
      return NextResponse.json({ error: 'Project ID is required and must be a string' }, { status: 400 });
    }
    
    if (!name || typeof name !== 'string') {
      console.error('‚ùå Erreur: name manquant ou invalide');
      return NextResponse.json({ error: 'Layout name is required and must be a string' }, { status: 400 });
    }
    
    if (!elements || !Array.isArray(elements) || elements.length === 0) {
      console.error('‚ùå Erreur: elements invalides', elements);
      return NextResponse.json({ error: 'Elements data is invalid or empty' }, { status: 400 });
    }
    
    if (!stageSize || typeof stageSize !== 'object') {
      console.error('‚ùå Erreur: stageSize manquant ou invalide', stageSize);
      return NextResponse.json({ error: 'Stage size data is invalid' }, { status: 400 });
    }
    
    // R√©cup√©rer les variables d'environnement
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    
    // MODIFICATION CRITIQUE: Utiliser la cl√© anonyme au lieu de la cl√© de service
    // qui semble avoir un probl√®me persistant
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
    
    // Loguer les valeurs des variables d'environnement (sans r√©v√©ler la cl√© compl√®te)
    console.log('üîë Variables d\'environnement:');
    console.log('- URL:', supabaseUrl);
    console.log('- KEY prefix:', supabaseKey ? supabaseKey.substring(0, 10) + '...' : 'null');
    
    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå Variables d\'environnement manquantes');
      return NextResponse.json({ 
        error: 'Configuration Supabase incompl√®te', 
        detail: 'Variables d\'environnement manquantes'
      }, { status: 500 });
    }
    
    // Initialisation du client Supabase avec la cl√© anonyme
    console.log('üîå Cr√©ation du client Supabase avec la cl√© anonyme');
    const supabase = createClient(supabaseUrl, supabaseKey, {
      auth: { 
        persistSession: false,
        autoRefreshToken: false
      }
    });
    
    // Test de connexion
    console.log('üß™ Test de connexion √† Supabase...');
    try {
      const { data: testData, error: testError } = await supabase
        .from('projects')
        .select('id')
        .eq('id', projectId)
        .limit(1)
        .single();
      
      if (testError) {
        console.error('‚ùå Erreur de connexion:', testError);
        return NextResponse.json({ 
          error: 'Database connection error',
          details: testError.message,
          hint: testError.hint
        }, { status: 500 });
      }
      
      console.log('‚úÖ Connexion OK, projet trouv√©:', testData.id);
    } catch (connErr) {
      console.error('‚ùå Exception lors du test de connexion:', connErr);
      return NextResponse.json({ 
        error: 'Database connection exception',
        details: connErr.message
      }, { status: 500 });
    }
    
    // Pr√©paration des donn√©es avec les structures simplifi√©es
    console.log('üì¶ Pr√©paration des donn√©es...');
    // Prepare the data to insert
    console.log('üíæ Pr√©paration des donn√©es √† ins√©rer');
    
    // Modifier la mani√®re dont on stocke les donn√©es
    // S'assurer que elements et stageSize sont stock√©s comme des cha√Ænes JSON
    const layoutToInsert = {
      project_id: projectId,
      name: name,
      elements: typeof elements === 'string' ? elements : JSON.stringify(elements),
      stage_size: typeof stageSize === 'string' ? stageSize : JSON.stringify(stageSize),
      created_at: new Date().toISOString()
    };
    
    console.log('üìÑ Donn√©es √† ins√©rer:', {
      project_id: layoutToInsert.project_id,
      name: layoutToInsert.name,
      elementsType: typeof elements,
      stageSizeType: typeof stageSize
    });
    
    // Insertion dans la base de donn√©es
    console.log('üíæ Insertion dans canvas_layouts...');
    let insertResult;
    try {
      const { data, error } = await supabase
        .from('canvas_layouts')
        .insert(layoutToInsert)
        .select();
      
      if (error) {
        console.error('‚ùå Erreur d\'insertion:', error);
        return NextResponse.json({ 
          error: 'Database error',
          details: error.message,
          hint: error.hint || 'Check table permissions and structure'
        }, { status: 500 });
      }
      
      insertResult = data;
      console.log('‚úÖ Insertion r√©ussie:', data);
    } catch (insertErr) {
      console.error('‚ùå Exception lors de l\'insertion:', insertErr);
      return NextResponse.json({ 
        error: 'Database insert exception',
        details: insertErr.message
      }, { status: 500 });
    }
    
    // Mise √† jour du projet si n√©cessaire
    if (setAsDefault && insertResult && insertResult.length > 0) {
      console.log('üîÑ Mise √† jour du projet avec le layout par d√©faut...');
      try {
        const { error: updateError } = await supabase
          .from('projects')
          .update({ default_layout_id: insertResult[0].id })
          .eq('id', projectId);
        
        if (updateError) {
          console.error('‚ö†Ô∏è Erreur lors de la mise √† jour du projet:', updateError);
          // Ne pas √©chouer compl√®tement si seulement cette partie √©choue
        } else {
          console.log('‚úÖ Projet mis √† jour avec succ√®s');
        }
      } catch (updateErr) {
        console.error('‚ö†Ô∏è Exception lors de la mise √† jour du projet:', updateErr);
        // Ne pas √©chouer compl√®tement si seulement cette partie √©choue
      }
    }
    
    // R√©cup√©rer tous les layouts du projet
    console.log('üîç R√©cup√©ration de tous les layouts du projet...');
    try {
      const { data: allLayouts, error: fetchError } = await supabase
        .from('canvas_layouts')
        .select('*')
        .eq('project_id', projectId)
        .order('created_at', { ascending: false });
      
      if (fetchError) {
        console.error('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des layouts:', fetchError);
        // Renvoyer uniquement le layout nouvellement cr√©√©
        return NextResponse.json({ 
          success: true, 
          data: insertResult[0], 
          allLayouts: insertResult 
        });
      }
      
      console.log(`‚úÖ ${allLayouts.length} layouts r√©cup√©r√©s`);
      
      return NextResponse.json({ 
        success: true, 
        data: insertResult[0], 
        allLayouts: allLayouts 
      });
    } catch (fetchErr) {
      console.error('‚ö†Ô∏è Exception lors de la r√©cup√©ration des layouts:', fetchErr);
      // Renvoyer uniquement le layout nouvellement cr√©√©
      return NextResponse.json({ 
        success: true, 
        data: insertResult[0], 
        allLayouts: insertResult 
      });
    }
    
  } catch (error) {
    console.error('üí• Exception g√©n√©rale:', error);
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }, { status: 500 });
  }
}
